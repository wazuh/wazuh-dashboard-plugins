# Wazuh App Copyright (C) 2021 Wazuh Inc. (License GPLv2)
version: '3.9'

x-logging: &logging
  logging:
    driver: loki
    options:
      loki-url: "http://host.docker.internal:3100/loki/api/v1/push"

services:
  generator:
    image: cfssl/cfssl
    profiles:
      - "saml"
      - "standard"
    <<: *logging
    volumes:
      - wi_certs:/certs/wi
      - wd_certs:/certs/wd
      - wm_certs:/certs/wm
      - idp_certs:/certs/idp
      - ./config/certs:/conf
    # Included to avoid docker from creating duplicated networks
    networks:
      - odfe-rel
    entrypoint: /bin/bash
    command: >
        -c '
          export certs=/tmp/certs
          mkdir $$certs
        	cd $$certs

        	echo "Generating CA"
        	cfssl gencert -initca /conf/ca.json | cfssljson -bare ca

        	echo "Generating servers certificates"
        	for i in odfe-node1 kibana wazuh.manager; do
        		echo "Generating cert for $$i"
        		cat /conf/host.json | \
        		sed "s/HOST/$$i/g" | \
        		cfssl gencert \
        			-ca $$certs/ca.pem \
        			-ca-key $$certs/ca-key.pem \
        			-config /conf/cfssl.json \
        			-profile=server - | \
        		cfssljson -bare $$i
        		openssl pkcs8 -topk8 -inform pem -in $$i-key.pem -outform pem -nocrypt -out $$i.key
            # openssl pkcs12 -export -inkey $$i-key.pem in $$i.pem -chain -CAfile $$certs/ca.pem -out $$i.p12
        	done

        	echo "Generating clients certificates"
          	for i in admin saml filebeat; do
          		echo "Generating cert for $$i"
        		cat /conf/host.json | \
        		sed "s/HOST/$$i/g" | \
        		cfssl gencert \
        			-ca $$certs/ca.pem \
        			-ca-key $$certs/ca-key.pem \
        			-config /conf/cfssl.json \
        			-profile=client - | \
        		cfssljson -bare $$i
        		openssl pkcs8 -topk8 -inform pem -in $$i-key.pem -outform pem -nocrypt -out $$i.key
            # openssl pkcs12 -export -inkey $$i-key.pem in $$i.pem -chain -CAfile $$certs/ca.pem -out $$i.p12
        	done

            echo "Setting up permissions"

            rm /certs/wi/* /certs/wd/* /certs/wm/*

            mv $$certs/odfe* /certs/wi
            mv $$certs/admin* /certs/wi
            mv /certs/wi/admin.key /certs/wi/admin-key.pem
            cp $$certs/*ca* /certs/wi

            mv $$certs/saml* /certs/idp
            mv /certs/idp/saml.key /certs/idp/saml-key.pem
            cp $$certs/*ca* /certs/idp

            mv $$certs/kibana* /certs/wd
            cp $$certs/*ca* /certs/wd

            mv $$certs/*.* /certs/wm

            chmod 640 /certs/wi/* /certs/wd/* /certs/wm/*
            chown -R 1000:1000 /certs/*
            ls -alR /certs/

            sleep 300
        '
    healthcheck:
      test: ["CMD-SHELL", "[ -r /certs/wm/wazuh.manager.pem ]"]
      interval: 2s
      timeout: 5s
      retries: 10

  idpsec:
    image: quay.io/keycloak/keycloak:19.0.1
    depends_on:
      generator:
        condition: service_healthy
    profiles:
      - "saml"
    volumes:
      - wi_certs:/certs/wi
      - wd_certs:/certs/wd
      - wm_certs:/certs/wm
      - idp_certs:/certs/idp
    entrypoint: /bin/bash
    command: >
      -c '
        # trust store
        for i in /certs/idp/ca.pem /certs/wd/kibana.pem /certs/wi/odfe-node1.pem
        do
          keytool -import -alias $$(basename $$i .pem) -file $$i -keystore /certs/idp/truststore.jks -storepass SecretPassword -trustcacerts -noprompt
        done
        sleep 300
      '
    healthcheck:
      test: ["CMD-SHELL", "[ -r /certs/idp/truststore.jks ]"]
      interval: 2s
      timeout: 5s
      retries: 10

  wazuh.manager:
    depends_on:
      generator:
        condition: service_healthy
    image: wazuh/wazuh-manager:${WAZUH_VERSION}
    profiles:
      - "saml"
      - "standard"
    hostname: wazuh.manager
    networks:
      - odfe-rel
      - mon
    <<: *logging
    environment:
      - INDEXER_URL=https://odfe-node1:9200
      - INDEXER_USERNAME=admin
      - INDEXER_PASSWORD=SecretPassword
      - FILEBEAT_SSL_VERIFICATION_MODE=full
      - SSL_CERTIFICATE_AUTHORITIES=/etc/ssl/wazuh/ca.pem
      - SSL_CERTIFICATE=/etc/ssl/wazuh/filebeat.pem
      - SSL_KEY=/etc/ssl/wazuh/filebeat.key
      - API_USERNAME=wazuh-wui
      - API_PASSWORD=MyS3cr37P450r.*-
    volumes:
      - wazuh_api_configuration:/var/ossec/api/configuration
      - wazuh_etc:/var/ossec/etc
      - wazuh_logs:/var/ossec/logs
      - wazuh_queue:/var/ossec/queue
      - wazuh_var_multigroups:/var/ossec/var/multigroups
      - wazuh_integrations:/var/ossec/integrations
      - wazuh_active_response:/var/ossec/active-response/bin
      - wazuh_agentless:/var/ossec/agentless
      - wazuh_wodles:/var/ossec/wodles
      - filebeat_etc:/etc/filebeat
      - filebeat_var:/var/lib/filebeat
      - wm_certs:/etc/ssl/wazuh
      - ./config/wazuh_cluster/wazuh_manager.conf:/wazuh-config-mount/etc/ossec.conf


  odfe-node1:
    image: amazon/opendistro-for-elasticsearch:$ES_VERSION
    <<: *logging
    profiles:
      - "saml"
      - "standard"
    depends_on:
      generator:
        condition: service_healthy
    environment:
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true # along with the memlock settings below, disables swapping
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m" # minimum and maximum Java heap size, recommend setting both to 50% of system RAM
      - network.host=0.0.0.0
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536 # maximum number of open files for the Elasticsearch user, set to at least 65536 on modern systems
        hard: 65536
    volumes:
      - odfe-data1:/usr/share/elasticsearch/data
      - odfe-logs1:/usr/share/elasticsearch/logs
      - wi_certs:/usr/share/elasticsearch/config/certs
      - ./config/elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
      - ./config/elasticsearch/internal_users.yml:/usr/share/elasticsearch/plugins/opendistro_security/securityconfig/internal_users.yml
      - ./config/elasticsearch/roles.yml:/usr/share/elasticsearch/plugins/opendistro_security/securityconfig/roles.yml
      - ./config/elasticsearch/roles_mapping.yml:/usr/share/elasticsearch/plugins/opendistro_security/securityconfig/roles_mapping.yml
      - ./config/elasticsearch/config.yml:/usr/share/elasticsearch/plugins/opendistro_security/securityconfig/config.yml
    networks:
      - odfe-rel
      - mon
    healthcheck:
      test: curl --cacert config/certs/ca.pem https://odfe-node1:9200 || exit 1
      interval: 10s
      timeout: 5s
      retries: 6

  kibana:
    image: amazon/opendistro-for-elasticsearch-kibana:$ES_VERSION
    <<: *logging
    depends_on:
      odfe-node1:
        condition: service_healthy
    profiles:
      - "saml"
      - "standard"
    ports:
      - 5601:443
    environment:
      - ELASTICSEARCH_URL=https://odfe-node1:9200
      - ELASTICSEARCH_HOSTS=https://odfe-node1:9200
    volumes:
      - ${KIBANA_CONF}:/usr/share/kibana/config/kibana.yml
      - wd_certs:/usr/share/kibana/config/certs
    networks:
      - odfe-rel
      - mon

  idp:
    image: quay.io/keycloak/keycloak:19.0.1
    depends_on:
      idpsec:
        condition: service_healthy
    profiles:
      - "saml"
    hostname: idp
    <<: *logging
    networks:
      - odfe-rel
      - mon
    ports:
      - "8080:8080"
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
      - KC_SPI_TRUSTSTORE_FILE_PASSWORD=SecretPassword
      - KC_SPI_TRUSTSTORE_FILE_FILE=/certs/truststore.jks
    volumes:
      - keycloak-data:/var/lib/keycloak/data
      - idp_certs:/certs
    command: start-dev
    healthcheck:
      test: curl -f http://idp:8080/auth/realms/master || exit 1
      interval: 10s
      timeout: 5s
      retries: 6

volumes:
  wi_certs:
  wd_certs:
  wm_certs:
  idp_certs:
  odfe-data1:
  odfe-logs1:
  wazuh_api_configuration:
  wazuh_etc:
  wazuh_logs:
  wazuh_queue:
  wazuh_var_multigroups:
  wazuh_integrations:
  wazuh_active_response:
  wazuh_agentless:
  wazuh_wodles:
  filebeat_etc:
  filebeat_var:
  wazuh-indexer-data:
  keycloak-data:

networks:
  odfe-rel:
    name: "${COMPOSE_PROJECT_NAME}"
  mon:
    external: true
