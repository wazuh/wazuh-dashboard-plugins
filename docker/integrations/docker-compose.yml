version: '3.7'

services:
  splunk:
    image: splunk/splunk:9.0.4
    volumes:
      - sp_certs:/opt/splunk/etc/auth/custom
      - ./config/splunk/default.yml:/tmp/defaults/default.yml
      - ./config/splunk/indexes.conf:/opt/splunk/etc/system/local/indexes.conf
    depends_on:
      generator:
        condition: service_healthy
    ports:
      - '8000:8000'
      - '8088:8088'
    environment:
      SPLUNK_START_ARGS: --accept-license
      SPLUNK_HTTP_ENABLESSL: 'true'
      SPLUNK_PASSWORD: password
      SPLUNK_HOSTNAME: splunk
      SPLUNK_STANDALONE_URL: https://splunk:8080

  ## WAZUH STACK

  wazuh.manager:
    image: wazuh/wazuh-manager:${WAZUH_VERSION}
    depends_on:
      es01:
        condition: service_healthy
    hostname: wazuh.manager
    ports:
      - '1514:1514'
      - '1515:1515'
      - '514:514/udp'
      - '55000:55000'
    environment:
      - INDEXER_URL=https://wazuh.indexer:9200
      - INDEXER_USERNAME=admin
      - INDEXER_PASSWORD=SecretPassword
      - FILEBEAT_SSL_VERIFICATION_MODE=full
      - SSL_CERTIFICATE_AUTHORITIES=/etc/ssl/root-ca.pem
      - SSL_CERTIFICATE=/etc/ssl/filebeat.pem
      - SSL_KEY=/etc/ssl/filebeat-key.pem
      - API_USERNAME=wazuh-wui
      - API_PASSWORD=MyS3cr37P450r.*-
      - LOGSTASH_KEYSTORE_PASS=mypassword
    volumes:
      - ./config/logstash/logstash-manager.conf:/etc/logstash/conf.d/logstash.conf
      - ./config/logstash/es_template.json:/etc/logstash/es_template.json
      - ./config/logstash/os_template.json:/etc/logstash/os_template.json
      - wm_certs:/etc/ssl
      - wd_certs:/etc/certs/wazuh-dashboard
      - es_certs:/etc/certs/elastic
      - packages:/tmp/packages
      - ./config/wazuh_cluster/wazuh_manager.conf:/wazuh-config-mount/etc/ossec.conf
      - ./extra/sample_alerts/changeDate.py:/tmp/changeDate.py
      - ./extra/sample_alerts/sample.json:/tmp/sample.json
      - ./extra/dashboards:/tmp/dashboards
      - ./config/splunkforwarder/inputs.conf:/opt/splunkforwarder/etc/system/local/inputs.conf
      - ./config/splunkforwarder/outputs.conf:/opt/splunkforwarder/etc/system/local/outputs.conf
      - ./config/splunkforwarder/props.conf:/opt/splunkforwarder/etc/system/local/props.conf
      - ./config/splunkforwarder/user-seed.conf:/opt/splunkforwarder/etc/system/local/user-seed.conf
    command: bash -c "cd tmp
      && cp /tmp/packages/* /opt/
      && tar -xzf /opt/logstash.tar.gz -C /opt
      && rm /opt/logstash.tar.gz
      && dpkg -i /opt/splunkforwarder.deb
      && rm /opt/splunkforwarder.deb
      && python3 changeDate.py
      && cat /var/ossec/logs/alerts/sample_alerts.json >> /var/ossec/logs/alerts/alerts.json
      && cd /opt/logstash-${STACK_VERSION}
      && bin/logstash-plugin install logstash-output-opensearch
      && echo COSO
      && bin/logstash -f /etc/logstash/conf.d/logstash.conf"
      && tail -F /var/ossec/logs/ossec.log

  wazuh.indexer:
    image: wazuh/wazuh-indexer:${WAZUH_VERSION}
    depends_on:
      generator:
        condition: service_healthy
    hostname: wazuh.indexer
    ports:
      - '9200:9200'
    environment:
      - 'OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m'
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - wi_certs:/usr/share/wazuh-indexer/config/certs/
      - ./config/wazuh_indexer/wazuh.indexer.yml:/usr/share/wazuh-indexer/config/opensearch.yml
      - ./config/wazuh_indexer/internal_users.yml:/usr/share/wazuh-indexer/plugins/opensearch-security/securityconfig/internal_users.yml

  wazuh.dashboard:
    image: wazuh/wazuh-dashboard:${WAZUH_VERSION}
    hostname: wazuh.dashboard
    depends_on:
      generator:
        condition: service_healthy
    ports:
      - 5601:5601
    environment:
      - INDEXER_USERNAME=admin
      - INDEXER_PASSWORD=SecretPassword
      - WAZUH_API_URL=https://wazuh.manager
      - API_USERNAME=wazuh-wui
      - API_PASSWORD=MyS3cr37P450r.*-
    volumes:
      - wd_certs:/usr/share/wazuh-dashboard/certs
      - ./config/wazuh_dashboard/opensearch_dashboards.yml:/usr/share/wazuh-dashboard/config/opensearch_dashboards.yml
      - ./config/wazuh_dashboard/wazuh.yml:/usr/share/wazuh-dashboard/data/wazuh/config/wazuh.yml

    links:
      - wazuh.indexer:wazuh.indexer
      - wazuh.manager:wazuh.manager

  ##ELASTIC STACK

  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - es_certs:/usr/share/elasticsearch/config/certs
    user: '0'
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: es01\n"\
          "    dns:\n"\
          "      - es01\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
      '
    healthcheck:
      test: ['CMD-SHELL', '[ -f config/certs/es01/es01.crt ]']
      interval: 1s
      timeout: 5s
      retries: 120
  es01:
    depends_on:
      setup:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - es_certs:/usr/share/elasticsearch/config/certs
    ports:
      - ${ES_PORT}:9200
    environment:
      - node.name=es01
      - cluster.name=${CLUSTER_NAME}
      - cluster.initial_master_nodes=es01
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es01/es01.key
      - xpack.security.http.ssl.certificate=certs/es01/es01.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es01/es01.key
      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          'CMD-SHELL',
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
  kibana:
    depends_on:
      es01:
        condition: service_healthy
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    volumes:
      - es_certs:/usr/share/kibana/config/certs
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=https://es01:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
    mem_limit: ${MEM_LIMIT}
    healthcheck:
      test:
        [
          'CMD-SHELL',
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  ## OPENSEARCH STACK
  opensearch:
    image: opensearchproject/opensearch:${OS_VERSION}
    depends_on:
      generator:
        condition: service_healthy
    container_name: opensearch
    environment:
      - cluster.name=opensearch-cluster
      - node.name=opensearch
      - discovery.seed_hosts=opensearch
      - cluster.initial_master_nodes=opensearch
      - bootstrap.memory_lock=true # along with the memlock settings below, disables swapping
      - 'OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m' # minimum and maximum Java heap size, recommend setting both to 50% of system RAM
    volumes:
      - os_certs:/usr/share/opensearch/config/certs/
      - ./config/opensearch/opensearch.yml:/usr/share/opensearch/config/opensearch.yml
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536 # maximum number of open files for the OpenSearch user, set to at least 65536 on modern systems
        hard: 65536
    ports:
      - 9203:9200
      - 9600:9600 # required for Performance Analyzer
    healthcheck:
      test:
        [
          'CMD-SHELL',
          "curl -v --cacert /usr/share/opensearch/config/certs/root-ca.pem https://opensearch:9200 2>&1 | grep -q '401 Unauthorized'",
        ]
      interval: 1s
      timeout: 5s
      retries: 120

  opensearch-dashboards:
    image: opensearchproject/opensearch-dashboards:${OS_VERSION}
    depends_on:
      opensearch:
        condition: service_healthy
    container_name: opensearch-dashboards
    ports:
      - 5603:5601
    expose:
      - '5601'
    volumes:
      - os_certs:/usr/share/opensearch-dashboards/config/certs/
      - ./config/opensearch_dashboards/opensearch_dashboards.yml:/usr/share/opensearch-dashboards/config/opensearch_dashboards.yml

  ### Logstash
  logstash:
    depends_on:
      generator:
        condition: service_healthy
    image: docker.elastic.co/logstash/logstash:8.6.2
    command:
      bash -c "bin/logstash-plugin install logstash-input-opensearch logstash-output-opensearch
      && logstash -f /etc/logstash/conf.d/logstash.conf"
    volumes:
      - wm_certs:/etc/ssl
      - ./config/logstash/logstash-indexer.conf:/etc/logstash/conf.d/logstash.conf
      - ./config/logstash/es_template.json:/etc/logstash/es_template.json
      - ./config/logstash/os_templatee.json:/etc/logstash/os_templatee.json
      - ./config/logstash/os_template.json:/etc/logstash/os_template.json
      - wd_certs:/etc/certs/wazuh-dashboard
      - es_certs:/etc/certs/elastic
    environment:
      LS_JAVA_OPTS: '-Xmx1024m -Xms1024m'

  ### Certificates generation

  generator:
    image: cfssl/cfssl
    volumes:
      - wi_certs:/certs/wi
      - wd_certs:/certs/wd
      - wm_certs:/certs/wm
      - sp_certs:/certs/sp
      - es_certs:/certs/es
      - os_certs:/certs/os
      - packages:/packages
      - ./config/certs:/conf
    entrypoint: /bin/bash
    command: >
      -c '
        echo Validating packages
        [ ! -f "/packages/logstash.tar.gz" ] && echo Downloading Logstash && wget -q -O logstash.tar.gz ${LOGSTASH_URL} && cp logstash.tar.gz /packages/logstash.tar.gz && echo Download complete
        [ ! -f "/packages/splunkforwarder.deb" ] && echo Downloading Splunk forwarder && wget -q -O splunkforwarder.deb ${SPLUNK_FORWARDER_URL} && cp splunkforwarder.deb /packages/splunkforwarder.deb && echo Download complete

        export certs=/tmp/certs
        mkdir $$certs
      	cd $$certs

      	echo "Generating CA"
      	cfssl gencert -initca /conf/ca.json | cfssljson -bare ca

      	echo "Generating servers certificates"
      	for i in wazuh.indexer wazuh-dashboard wazuh.manager splunk opensearch; do
      		echo "Generating cert for $$i"
      		cat /conf/host.json | \
      		sed "s/HOST/$$i/g" | \
      		cfssl gencert \
      			-ca $$certs/ca.pem \
      			-ca-key $$certs/ca-key.pem \
      			-config /conf/cfssl.json \
      			-profile=server - | \
      		cfssljson -bare $$i
      		openssl pkcs8 -topk8 -inform pem -in $$i-key.pem -outform pem -nocrypt -out $$i.key
      	done

      	echo "Generating clients certificates"
        	for i in admin filebeat; do
        		echo "Generating cert for $$i"
      		cat /conf/host.json | \
      		sed "s/HOST/$$i/g" | \
      		cfssl gencert \
      			-ca $$certs/ca.pem \
      			-ca-key $$certs/ca-key.pem \
      			-config /conf/cfssl.json \
      			-profile=client - | \
      		cfssljson -bare $$i
      		openssl pkcs8 -topk8 -inform pem -in $$i-key.pem -outform pem -nocrypt -out $$i.key
      	done

          echo "Setting up permissions"

          rm /certs/wi/* /certs/wd/* /certs/wm/*

          mv $$certs/wazuh.indexer* /certs/wi
          mv $$certs/admin* /certs/wi
          mv /certs/wi/admin.key /certs/wi/admin-key.pem
          cp $$certs/ca.pem /certs/wi/root-ca.pem
          cp $$certs/ca-key.pem /certs/wi/root-ca-key.pem

          mv $$certs/wazuh-dashboard* /certs/wd
          cp $$certs/ca.pem /certs/wd/root-ca.pem
          cp $$certs/ca-key.pem /certs/wd/root-ca-key.pem

          mv $$certs/splunk* /certs/sp
          cp $$certs/ca.pem /certs/sp/cacert.pem
          cp $$certs/ca-key.pem /certs/sp/cacert-key.pem
          cat /certs/sp/splunk.pem /certs/sp/splunk-key.pem /certs/sp/cacert.pem > /certs/sp/splunkhec.pem

          mv $$certs/opensearch* /certs/os
          cp $$certs/ca.pem /certs/os/root-ca.pem
          cp $$certs/ca-key.pem /certs/os/root-ca-key.pem

          mv $$certs/*.* /certs/wm
          cp /certs/wm/ca.pem /certs/wm/root-ca.pem
          cp /certs/wm/ca-key.pem /certs/wm/root-ca-key.pem

          chmod 640 /certs/wi/* /certs/wd/* /certs/wm/*
          chown -R 1000:1000 /certs/*
          ls -alR /certs/

          sleep 300

      '
    healthcheck:
      test:
        [
          'CMD-SHELL',
          '[ -r /certs/wm/wazuh.manager.pem ] && [ -f /packages/splunkforwarder.deb ]',
        ]
      interval: 2s
      timeout: 5s
      retries: 100

volumes:
  wi_certs:
  wd_certs:
  wm_certs:
  sp_certs:
  es_certs:
  os_certs:
  packages:
