/**
 * A webpack plugin that sets module ids to paths that are the same value as was
 * generated by requirejs.
 * @param {Object} options
 * @param {String} options.context The root path from which to calculate module
 * id. Only modules found in this path will be used.
 * @param {String} [options.prefix] A prefix to add to module id. It is recommended
 * to use a unique identifier here, like an app name, to prevent id conflicts!
 * id paths from.
 */
function SplunkNameModuleIdsPlugin(options) {
    if (!options.context) {
        throw new Error('options.context is required');
    }
    options.prefix || (options.prefix = '');
    this.options = options;
}

SplunkNameModuleIdsPlugin.prototype.apply = function(compiler) {
    compiler.hooks.compilation.tap(
        'SplunkNameModuleIdsPlugin',
        function(compilation) {
            compilation.hooks.beforeModuleIds.tap(
                'SplunkNameModuleIdsPlugin',
                function(modules) {
                    modules.forEach(function(module) {
                        if (module.id === null && module.libIdent) {
                            var modulePath = module.libIdent({
                                context: this.options.context,
                            });
                            if (/^\.\//.test(modulePath)) {
                                module.id = modulePath
                                    .replace(/^\.\//, this.options.prefix)
                                    .replace(/(\.js$|\.es$|\.jsx$)/, '');
                            }
                        }
                    }, this);
                }.bind(this)
            );
        }.bind(this)
    );
};

module.exports = SplunkNameModuleIdsPlugin;
