/*
 * Wazuh app - Specific methods to fetch Wazuh vulnerability data from Elasticsearch
 * Copyright (C) 2015-2022 Wazuh, Inc.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * Find more information about this on the LICENSE file.
 */
import { Base } from './base-query';
import { WAZUH_ALERTS_PATTERN } from '../../../common/constants';

/**
 * Returns top 3 agents for specific severity
 * @param {*} context Endpoint context
 * @param {Number} gte Timestamp (ms) from
 * @param {Number} lte Timestamp (ms) to
 * @param {String} severity Low, Medium, High, Critical
 * @param {String} filters E.g: cluster.name: wazuh AND rule.groups: vulnerability
 * @returns {Array<Number>}
 */
export const topAgentCount = async (
  context,
  gte,
  lte,
  severity,
  filters,
  pattern = WAZUH_ALERTS_PATTERN
) => {
  try {
    const base = {};

    Object.assign(base, Base(pattern, filters, gte, lte));

    Object.assign(base.aggs, {
      '2': {
        terms: {
          field: 'agent.id',
          size: 3,
          order: {
            _count: 'desc'
          }
        }
      }
    });

    base.query.bool.must.push({
      match_phrase: {
        'data.vulnerability.severity': {
          query: severity
        }
      }
    });

    const response = await context.core.elasticsearch.client.asCurrentUser.search({
      index: pattern,
      body: base
    });
    const { buckets } = response.body.aggregations['2'];

    return buckets.map(item => item.key);
  } catch (error) {
    return Promise.reject(error);
  }
}

/**
 * Returns top 3 CVE
 * @param {Number} context Endpoint context
 * @param {Number} gte Timestamp (ms) from
 * @param {Number} lte Timestamp (ms) to
 * @param {String} filters E.g: cluster.name: wazuh AND rule.groups: vulnerability
 * @returns {Array<Number>}
 */
export const topCVECount = async (
  context, 
  gte, 
  lte, 
  filters, 
  pattern = WAZUH_ALERTS_PATTERN
) => {
  try {
    const base = {};

    Object.assign(base, Base(pattern, filters, gte, lte));

    Object.assign(base.aggs, {
      '2': {
        terms: {
          field: 'data.vulnerability.cve',
          size: 3,
          order: {
            _count: 'desc'
          }
        }
      }
    });

    const response = await context.core.elasticsearch.client.asCurrentUser.search({
      index: pattern,
      body: base
    });
    const { buckets } = response.body.aggregations['2'];

    return buckets.map(item => item.key);
  } catch (error) {
    return Promise.reject(error);
  }
}

/**
 * Returns unique count of vulnerability alerts using specific severity.
 * @param {*} context Endpoint context
 * @param {Number} gte Timestamp (ms) from
 * @param {Number} lte Timestamp (ms) to
 * @param {String} severity Low, Medium, High, Critical
 * @param {String} filters E.g: cluster.name: wazuh AND rule.groups: vulnerability
 * @returns {Number}
 */
export const uniqueSeverityCount = async (
  context,
  gte,
  lte,
  severity,
  filters,
  pattern = WAZUH_ALERTS_PATTERN
) => {
  try {
    const base = {};

    Object.assign(base, Base(pattern, filters, gte, lte));

    Object.assign(base.aggs, {
      '1': {
        cardinality: {
          field: 'agent.id'
        }
      }
    });

    base.query.bool.must.push({
      match_phrase: {
        'data.vulnerability.severity': {
          query: severity
        }
      }
    });

    const response = await context.core.elasticsearch.client.asCurrentUser.search({
      index: pattern,
      body: base
    });

    return response.body &&
      response.body.aggregations &&
      response.body.aggregations['1'] &&
      response.body.aggregations['1'].value
      ? response.body.aggregations['1'].value
      : 0;
  } catch (error) {
    return Promise.reject(error);
  }
}

export const topPackages = async (
  context,
  gte,
  lte,
  severity,
  filters,
  pattern = WAZUH_ALERTS_PATTERN
) => {
  try {
    const base = {};

    Object.assign(base, Base(pattern, filters, gte, lte));

    Object.assign(base.aggs, {
      '2': {
        terms: {
          field: 'data.vulnerability.package.name',
          size: 20,
          order: {
            _count: 'desc'
          }
        }
      }
    });

    base.query.bool.must.push({
      match_phrase: {
        'data.vulnerability.severity': {
          query: severity
        }
      }
    });

    const response = await context.core.elasticsearch.client.asCurrentUser.search({
      index: pattern,
      body: base
    });

    const { buckets } = response.body.aggregations['2'];

    return buckets.map(item => ({
      package: item.key,
      severity: severity
    }));
  } catch (error) {
    return Promise.reject(error);
  }
}

export const topPackagesWithCVE = async(
  context,
  gte,
  lte,
  severity,
  filters,
  pattern = WAZUH_ALERTS_PATTERN
) => {
  try {
    const base = {};

    Object.assign(base, Base(pattern, filters, gte, lte));

    Object.assign(base.aggs, {
      '2': {
        terms: {
          field: 'data.vulnerability.package.name',
          size: 3,
          order: {
            _count: 'desc'
          }
        },
        aggs: {
          '3': {
            terms: {
              field: 'data.vulnerability.reference',
              size: 10,
              order: {
                _count: 'desc'
              }
            }
          }
        }
      }
    });

    base.query.bool.must.push({
      match_phrase: {
        'data.vulnerability.severity': {
          query: severity
        }
      }
    });

    const response = await context.core.elasticsearch.client.asCurrentUser.search({
      index: pattern,
      body: base
    });
    const { buckets } = response.body.aggregations['2'];

    return buckets.map(item => ({
      package: item.key,
      references: item['3'].buckets.map(ref => ref.key)
    }));
  } catch (error) {
    return Promise.reject(error);
  }
};
